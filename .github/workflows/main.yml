name: Main

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        debug: ['--disable-debug', '--enable-debug']
        cc: ['gcc', 'clang', 'tcc']
        opt: ['', '-O0', '-O3']
    steps:
      - uses: actions/checkout@v2
      - name: dependencies
        run: sudo apt-get --yes install clang tcc
      - name: autogen
        run: ./autogen.sh
      - name: configure
        run: ./configure ${{matrix.debug}} --enable-tests --enable-tests-python CC='${{matrix.cc}}' CFLAGS='${{matrix.opt}}'
      - name: make
        run: make
      - name: check
        run: make check || (./test-suite-log && false)
      - name: install
        run: sudo make install

  cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cross:
          - host: 'i386-unknown-elf'
            apt: 'crossbuild-essential-i386'
            ar:     'i686-linux-gnu-ar'
            cc:     'i686-linux-gnu-gcc'
            ld:     'i686-linux-gnu-ld'
            ranlib: 'i686-linux-gnu-ranlib'
    steps:
      - uses: actions/checkout@v2
      - name: dependencies
        run: sudo apt-get --yes install ${{matrix.cross.apt}}
      - name: autogen
        run: ./autogen.sh
      - name: configure
        run: ./configure --enable-tests --enable-tests-python AR='${{matrix.cross.ar}}' CC='${{matrix.cross.cc}}' LD='${{matrix.cross.ld}}' RANLIB='${{matrix.cross.ranlib}}'
      - name: make
        run: make
      - name: check
        run: make check || (./test-suite-log && false)
      - name: install
        run: sudo make install

  cond:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        packages:
          - without: 'all'
          - without: 'io'
          - without: 'ntoa'
            dependencies: '--without-printf --without-units'
          - without: 'printf'
    steps:
      - uses: actions/checkout@v2
      - name: autogen
        run: ./autogen.sh
      - name: configure
        run: ./configure --enable-debug --enable-tests --enable-tests-python --without-${{matrix.packages.without}} ${{matrix.packages.dependencies}}
      - name: make
        run: make
      - name: check
        run: make check || (./test-suite-log && false)
      - name: install
        run: sudo make install

  dist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: autogen
        run: ./autogen.sh
      - name: configure dist
        run: ./configure
      - name: dist
        run: make dist
      - name: extract
        run: tar -xzf "libkernaux-$(cat VERSION).tar.gz"
      - name: configure
        run: cd "libkernaux-$(cat VERSION)" && ./configure --enable-debug --enable-tests --enable-tests-python
      - name: make
        run: cd "libkernaux-$(cat VERSION)" && make
      - name: check
        run: cd "libkernaux-$(cat VERSION)" && make check || (./test-suite-log && false)
      - name: install
        run: cd "libkernaux-$(cat VERSION)" && sudo make install

  cppcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: dependencies
        run: sudo apt-get --yes install cppcheck
      - name: cppcheck source code
        # TODO: don't suppress "src/printf.c"
        run: cppcheck --quiet --error-exitcode=1 --std=c99 --enable=warning,style,performance,portability --suppress='*:src/printf.c' include/ src/ libc/
      - name: cppcheck examples
        run: cppcheck --quiet --error-exitcode=1 --std=c99 --enable=warning,style,performance,portability --suppress=duplicateExpression --suppress=staticStringCompare examples/
      - name: cppcheck tests
        run: cppcheck --quiet --error-exitcode=1 --std=c99 --enable=warning,style,performance,portability --suppress=unusedStructMember tests/
